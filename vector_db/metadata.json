  {
    "content": "==================== START: architecture-tmpl ==================== # {Project Name} Architecture Document ## Introduction / Preamble {This document outlines the overall project architecture, including backend systems, shared services, and non-UI specific concerns. Its primary goal is to serve as the guiding architectural blueprint for AI-driven development, ensuring consistency and adherence to chosen patterns and technologies. **Relationship to Frontend Architecture:** If the project includes a significant user interface, a separate Frontend Architecture Document (typically named `front-end-architecture-tmpl.txt` or similar, and linked in the \"Key Reference Documents\" section) details the frontend-specific design and MUST be used in conjunction with this document. Core technology stack choices documented herein (see \"Definitive Tech Stack Selections\") are definitive for the entire project, including any frontend components.} ## Table of Contents { Update this if sections and subsections are added or removed } ## Technical Summary { Provide a brief paragraph overview of the system's architecture, key components, technology choices, and architectural patterns used. Reference the goals from the PRD. } ## High-Level Overview { Describe the main architectural style (e.g., Monolith, Microservices, Serverless, Event-Driven), reflecting the decision made in the PRD. Explain the repository structure (Monorepo/Polyrepo). Explain the primary user interaction or data flow at a conceptual level. } { Insert high-level mermaid system context or interaction diagram here - e.g., Mermaid Class C4 Models Layer 1 and 2 } ## Architectural / Design Patterns Adopted { List the key high-level patterns chosen for the architecture. These foundational patterns should be established early as they guide component design, interactions, and technology choices. } - **Pattern 1:** {e.g., Serverless, Event-Driven, Microservices, CQRS} - _Rationale/Reference:_ {Briefly why, or link to a more detailed explanation if needed} - **Pattern 2:** {e.g., Dependency Injection, Repository Pattern, Module Pattern} - _Rationale/Reference:_ {...} - **Pattern N:** {...} ## Component View { Describe the major logical components or services of the system and their responsibilities, reflecting the decided overall architecture (e.g., distinct microservices, modules within a monolith, packages within a monorepo) and the architectural patterns adopted. Explain how they collaborate. } - Component A: {Description of responsibility} {Insert component diagram here if it helps - e.g., using Mermaid graph TD or C4 Model Container/Component Diagram} - Component N...: {Description of responsibility} { Insert component diagram here if it helps - e.g., using Mermaid graph TD or C4 Model Container/Component Diagram } ## Project Structure {Provide an ASCII or Mermaid diagram representing the project's folder structure. The following is a general example. If a `front-end-architecture-tmpl.txt` (or equivalent) is in use, it will contain the detailed structure for the frontend portion (e.g., within `src/frontend/` or a dedicated `frontend/` root directory). Shared code structure (e.g., in a `packages/` directory for a monorepo) should also be detailed here.} ```plaintext {project-root}/ \u251c\u2500\u2500 .github/ # CI/CD workflows (e.g., GitHub Actions) \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 .vscode/ # VSCode settings (optional) \u2502 \u2514\u2500\u2500 settings.json \u251c\u2500\u2500 build/ # Compiled output (if applicable, often git-ignored) \u251c\u2500\u2500 config/ # Static configuration files (if any) \u251c\u2500\u2500 docs/ # Project documentation (PRD, Arch, etc.) \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 ...",
    "metadata": {
      "source": "uploaded_docs\\templates.txt",
      "filename": "templates.txt",
      "processed_at": "2025-06-05T00:07:01.782873",
      "chunk_index": 0
    }
  },
  {
    "content": "Mermaid graph TD or C4 Model Container/Component Diagram } ## Project Structure {Provide an ASCII or Mermaid diagram representing the project's folder structure. The following is a general example. If a `front-end-architecture-tmpl.txt` (or equivalent) is in use, it will contain the detailed structure for the frontend portion (e.g., within `src/frontend/` or a dedicated `frontend/` root directory). Shared code structure (e.g., in a `packages/` directory for a monorepo) should also be detailed here.} ```plaintext {project-root}/ \u251c\u2500\u2500 .github/ # CI/CD workflows (e.g., GitHub Actions) \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 main.yml \u251c\u2500\u2500 .vscode/ # VSCode settings (optional) \u2502 \u2514\u2500\u2500 settings.json \u251c\u2500\u2500 build/ # Compiled output (if applicable, often git-ignored) \u251c\u2500\u2500 config/ # Static configuration files (if any) \u251c\u2500\u2500 docs/ # Project documentation (PRD, Arch, etc.) \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 ... (other .md files) \u251c\u2500\u2500 infra/ # Infrastructure as Code (e.g., CDK, Terraform) \u2502 \u2514\u2500\u2500 lib/ \u2502 \u2514\u2500\u2500 bin/ \u251c\u2500\u2500 node_modules/ / venv / target/ # Project dependencies (git-ignored) \u251c\u2500\u2500 scripts/ # Utility scripts (build, deploy helpers, etc.) \u251c\u2500\u2500 src/ # Application source code \u2502 \u251c\u2500\u2500 backend/ # Backend-specific application code (if distinct frontend exists) \u2502 \u2502 \u251c\u2500\u2500 core/ # Core business logic, domain models \u2502 \u2502 \u251c\u2500\u2500 services/ # Business services, orchestrators \u2502 \u2502 \u251c\u2500\u2500 adapters/ # Adapters to external systems (DB, APIs) \u2502 \u2502 \u251c\u2500\u2500 controllers/ / routes/ # API endpoint handlers \u2502 \u2502 \u2514\u2500\u2500 main.ts / app.py # Backend application entry point \u2502 \u251c\u2500\u2500 frontend/ # Placeholder: See Frontend Architecture Doc for details if used \u2502 \u251c\u2500\u2500 shared/ / common/ # Code shared (e.g., types, utils, domain models if applicable) \u2502 \u2502 \u2514\u2500\u2500 types/ \u2502 \u2514\u2500\u2500 main.ts / index.ts / app.ts # Main application entry point (if not using backend/frontend split above) \u251c\u2500\u2500 stories/ # Generated story files for development (optional) \u2502 \u2514\u2500\u2500 epic1/ \u251c\u2500\u2500 test/ # Automated tests \u2502 \u251c\u2500\u2500 unit/ # Unit tests (mirroring src structure) \u2502 \u251c\u2500\u2500 integration/ # Integration tests \u2502 \u2514\u2500\u2500 e2e/ # End-to-end tests \u251c\u2500\u2500 .env.example # Example environment variables \u251c\u2500\u2500 .gitignore # Git ignore rules \u251c\u2500\u2500 package.json / requirements.txt / pom.xml # Project manifest and dependencies \u251c\u2500\u2500 tsconfig.json / pyproject.toml # Language-specific configuration (if applicable) \u251c\u2500\u2500 Dockerfile # Docker build instructions (if applicable) \u2514\u2500\u2500 README.md # Project overview and setup instructions ``` (Adjust the example tree based on the actual project type - e.g., Python would have requirements.txt, etc. The structure above illustrates a potential separation for projects with distinct frontends; for simpler projects or APIs, the `src/` structure might be flatter.) ### Key Directory Descriptions - docs/: Contains all project planning and reference documentation. - infra/: Holds the Infrastructure as Code definitions (e.g., AWS CDK, Terraform). - src/: Contains the main application source code. May be subdivided (e.g., `backend/`, `frontend/`, `shared/`) depending on project complexity and whether a separate frontend architecture document is in use. - src/backend/core/ / src/core/ / src/domain/: Core business logic, entities, use cases, independent of frameworks/external services. - src/backend/adapters/ / src/adapters/ / src/infrastructure/: Implementation details, interactions with databases, cloud SDKs, frameworks.",
    "metadata": {
      "source": "uploaded_docs\\templates.txt",
      "filename": "templates.txt",
      "processed_at": "2025-06-05T00:07:01.782873",
      "chunk_index": 1
    }
  },
